#!/bin/bash
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# WildFly Control Script
# -----------------------------------------------------------------------------
# History:
#   Version 1.03 - 2018-07-08, Kim Jensen <kim@dawn.dk>
#     o Added building of CWS from sources
#   Version 1.02 - 2018-06-21, Kim Jensen <kim@dawn.dk>
#     o Added a config method to configure a new WildFly instance
#   Version 1.01 - 2018-06-04, Kim Jensen <kim@dawn.dk>
#     o Added new Java home for Wildfly
#   Version 1.00 - 2017-10-16, Kim Jensen <kim@dawn.dk>
#     o Initial version
# -----------------------------------------------------------------------------
# Methods:
#     o show_help     ( Void )  ::  Shows help on using the script
#     o getProcesses  ( Void )  ::  Retrieves WildFly process count
#     o doBuild       ( Void )  ::  Build CWS from source
#     o doConfigure   ( Void )  ::  Attempts to configure Payara
#     o doStart       ( Void )  ::  Attempts to start WildFly
#     o doStop        ( Void )  ::  Attempts to stop WildFly
#     o doDeploy      ( Void )  ::  Attempts to deploy into WildFly
#     o doUndeploy    ( Void )  ::  Attempts to undeploy from WildFly
#     o doStatus      ( Void )  ::  Retrieves the WildFly status
#     o doLog         ( Void )  ::  Tails the server log
#     o doClean       ( Void )  ::  Cleans existing test results
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Configuration settings, please only modify this section
# -----------------------------------------------------------------------------
readonly debugPort=8787

# Java & JBoss (WildFly) settings
export JAVA_OPTS="${JAVA_OPTS} -Xms1303m -Xmx1303m -Djava.net.preferIPv4Stack=true"
export JBOSS_PIDFILE="/var/run/lock/cws.pid"
export JBOSS_CONFIG="standalone-cws.xml"
export JBOSS_SCRIPT="${JBOSS_HOME}/bin/standalone.sh --server-config=${JBOSS_CONFIG} -Djboss.node.name=cws"
export LAUNCH_JBOSS_IN_BACKGROUND=1

readonly configs="${CWS_SOURCES}/accessories/release"
readonly rawStandalone="${configs}/standalone-wildfly13.xml"
readonly cmdStart="${JBOSS_SCRIPT} --debug ${debugPort}"

# Lock file settings for flock. Please don't change this!
readonly scriptLockFD="200"
readonly scriptLock="/tmp/.`basename $0`.lock"

# Script specific information, should only be altered, if logic is updated
readonly scriptVersion="1.03"
readonly scriptAuthor="Kim Jensen"
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Show Help - Displays the help, to use this script
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
show_help () {
    echo "WildFly Control script, Version ${scriptVersion} by ${scriptAuthor}"
    echo "Usage: `basename $0` [Action]"
    echo
    echo "  The Action must be one of the following:"
    echo "    build     Builds the CWS from source (requires Maven)"
    echo "    configure Attempts to configure a CWS WildFly instance"
    echo "    start     Attempts to start a CWS WildFly instance"
    echo "    stop      Attempts to stop the running CWS WildFly instance"
    echo "    deploy    Deploy the latest CWS snapshot to WildFly"
    echo "    undeploy  Undeploy the currently deployed CWS snapshot"
    echo "    status    Retrieves the status of the CWS WildFly instance"
    echo "    log       Tail on the Server Log"
    echo "    clean     Cleanup of WildFly, removing all deployments & log files"
    echo
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# getProcesses - Returns the number of processes associated with WildFly
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> 1 if WildFly is running, 0 if not
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
getProcesses () {
    currentProcesses=0

    if [ -f ${JBOSS_PIDFILE} ]; then
        read ppid < ${JBOSS_PIDFILE}
        processes=`ps --pid ${ppid} 2>/dev/null | grep -c ${ppid} 2>/dev/null`
        if [ "${processes}" -eq "1" ]; then
            currentProcesses=1
        else
            rm -f ${JBOSS_PIDFILE}
        fi
    fi

    return ${currentProcesses}
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doConfigure - Attempts to configure Payara
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doBuild () {
    echo "Building CWS from source"
    cd ${CWS_SOURCES}
    mvn clean package
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doConfigure - Attempts to configure WildFly
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doConfigure () {
    getProcesses

    if [ $? -eq 0 ]; then
        echo "Configuring WildFly for CWS"
        mkdir -p "${JBOSS_HOME}/modules/org/postgresql/main"
        cp "${CWS_SOURCES}/accessories/release/module.xml" "${JBOSS_HOME}/modules/org/postgresql/main"
        cp "${CWS_SOURCES}/accessories/release/postgresql-42.2.2.jar" "${JBOSS_HOME}/modules/org/postgresql/main"
        cp "${rawStandalone}" "${JBOSS_HOME}/standalone/configuration/${JBOSS_CONFIG}"
        # Theoretically the following two lines should do the trick with configuring WildFly at runtime, but it causes problems.
        #${JBOSS_HOME}/bin/jboss-cli.sh --connect --command="/subsystem=datasources/jdbc-driver=postgresql:add(driver-name=postgresql,driver-module-name=org.postgresql,driver-xa-datasource-class-name=org.postgresql.xa.PGXADataSource)" 2>/dev/null
        #${JBOSS_HOME}/bin/jboss-cli.sh --connect --command="data-source add --name=cwsDS --driver-name=postgresql --jndi-name=java:/datasources/cwsDS --connection-url=jdbc:postgresql://localhost:5432/cws --user-name=cws_user --password=cws --use-ccm=false --max-pool-size=25 --blocking-timeout-wait-millis=5000 --enabled=true" 2>/dev/null
        echo "WildFly has been configured"
    else
        echo "WildFly cannot be configured when already running"
    fi
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doStart - Attempts to start WildFly
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doStart () {
    getProcesses

    if [ $? -eq 0 ]; then
        echo "Starting WildFly ..."
        ${cmdStart} 2>&1 &
        echo "WildFly has been started"
    else
        echo "WildFly is already running"
    fi
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doStop - Attempts to stop WildFly
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doStop () {
    getProcesses

    if [ $? -eq 0 ]; then
        echo "WildFly is not running"
    else
        echo "Stopping WildFly ..."
        read ppid < ${JBOSS_PIDFILE}
        kill -15 ${ppid}
        echo "WildFly has been stopped"
    fi
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doDeploy - Attempts to deploy the latest snapshot to WildFly
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doDeploy () {
    getProcesses

    if [ $? -eq 0 ]; then
        echo "WildFly is not running"
    else
        echo "Deploying the latest Snapshot to WildFly"
        ${JBOSS_HOME}/bin/jboss-cli.sh --connect --controller=localhost:9990 --command="deploy ${CWS_SOURCES}/cws-wildfly/target/cws.war --force"
    fi
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doUndeploy - Undeploy's current deployed snapshot from WildFly
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doUndeploy () {
    getProcesses

    if [ $? -eq 0 ]; then
        echo "WildFly is not running"
    else
        echo "Undeploying current deployed snapshot from WildFly"
        ${JBOSS_HOME}/bin/jboss-cli.sh --connect --controller=localhost:9990 --command="undeploy cws.war"
    fi
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doStatus - Retrieves the WildFly Status
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doStatus () {
    getProcesses

    if [ $? -eq 0 ]; then
        echo "WildFly is not running"
    else
        echo "WildFly is currently running"
    fi
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doLog - Tail on the WildFly Server log
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doLog () {
    tail -f ${JBOSS_HOME}/standalone/log/server.log
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doClean - Cleaning up logs and results
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doClean () {
    getProcesses

    if [ $? -ge 1 ]; then
        echo "Cannot clear files when WildFly is running."
    else
        standalone=${JBOSS_HOME}/standalone
        configuration=${standalone}/configuration

        echo "Cleaning WildFly Log files"
        rm -fr ${standalone}/log 2>/dev/null
        mkdir  ${standalone}/log 2>/dev/null
        touch  ${standalone}/log/server.log 2>/dev/null

        echo "Cleaning WildFly Deployments"
        rm -fr ${standalone}/data/* 2>/dev/null
        rm -fr ${standalone}/deployments/* 2>/dev/null
        rm -fr ${standalone}/tmp/* 2>/dev/null
        mkdir  ${standalone}/tmp/auth 2>/dev/null
        rm -fr ${standalone}/work/jboss.web/default-host/* 2>/dev/null

        echo "Cleaning (Reverting) WildFLy Standalone Configuration"
        cp "${rawStandalone}" "${JBOSS_HOME}/standalone/configuration/${JBOSS_CONFIG}"
        rm -fr ${configuration}/standalone_xml_history 2>/dev/null
    fi
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Main part, please don't touch!
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

# Create & Acquire lock file
eval "exec ${scriptLockFD}>${scriptLock}"
flock -n ${scriptLockFD}

if [ $? -ne 0 ]; then
    echo "Another instance is already running..."
    exit 1
elif [ $# = 1 ]; then
    if [ -z "${JBOSS_HOME}"  ]; then
        echo "Script requires that the system variable \$JBOSS_HOME is defined."
        echo
    else
        action=${1}

        if [ "${action}" = "build" ]; then
            if [ -z "${M2_HOME}" -o -z "${CWS_SOURCES}" ]; then
                echo "Both the CWS Sources & Maven must be defined"
                echo "  * Please install Maven and set the environment variable \$M2_HOME."
                echo "  * Please set the \$CWS_SOURCES to the root of the CWS sources."
            else
                doBuild
            fi
        elif [ "${action}" = "configure" ]; then
            doConfigure
        elif [ "${action}" = "start" ]; then
            doStart
        elif [ "${action}" = "stop" ]; then
            doStop
        elif [ "${action}" = "deploy" ]; then
            if [ -z "${CWS_SOURCES}" ]; then
                echo "Deploying CWS requires that \$CWS_SOURCES is defined to the root of the CWS sources directory."
            else
                doDeploy
            fi
        elif [ "${action}" = "undeploy" ]; then
            doUndeploy
        elif [ "${action}" = "log" ]; then
            doLog
        elif [ "${action}" = "clean" ]; then
            doClean
        else
            show_help
        fi
    fi
else
    show_help
fi

# Now, remove the lockFile
flock -u "${scriptLockFD}"
rm ${scriptLock}
