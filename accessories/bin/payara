#!/bin/bash
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Payara Control Script
# -----------------------------------------------------------------------------
# History:
#   Version 1.00 - 2018-06-20, Kim Jensen <kim@dawn.dk>
#     o Initial version
# -----------------------------------------------------------------------------
# Methods:
#     o show_help     ( Void )  ::  Shows help on using the script
#     o doLock        ( Void )  ::  Creates a lock file
#     o getProcesses  ( Void )  ::  Retrieves Payara process count
#     o doConfigure   ( Void )  ::  Attempts to configure Payara
#     o doStart       ( Void )  ::  Attempts to start Payara
#     o doStop        ( Void )  ::  Attempts to stop Payara
#     o doDeploy      ( Void )  ::  Attempts to deploy into Payara
#     o doUndeploy    ( Void )  ::  Attempts to undeploy from Payara
#     o doStatus      ( Void )  ::  Retrieves the Payara status
#     o doLog         ( Void )  ::  Tails the server log
#     o doClean       ( Void )  ::  Cleans existing test results
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Configuration settings, please only modify this section
# -----------------------------------------------------------------------------
readonly source="${HOME}/JavaDog.io/github/cws"
readonly appDirectory="/opt/java/payara"
readonly domain="domain1"
readonly dbUser="cws_user"
readonly dbPassword="cws"
readonly dbHost="localhost"
readonly dbName="cws"

# Java & JBoss (Payara) settings
export JAVA_HOME="/opt/java/jre"
export JAVA_OPTS="${JAVA_OPTS} -Xms1303m -Xmx1303m -Djava.net.preferIPv4Stack=true"
export GLASSFISH_HOME="${appDirectory}"
export LAUNCH_JBOSS_IN_BACKGROUND=1
export PATH="${JAVA_HOME}/bin:${GLASSFISH_HOME}/bin:${PATH}"

readonly cmd="${GLASSFISH_HOME}/bin/asadmin"
readonly cmdAddPG="${cmd} add-library ${source}/accessories/release/postgresql-43.2.2.jar"
readonly cmdPool="${cmd} create-jdbc-connection-pool --datasourceclassname org.postgresql.xa.PGXADataSource --restype javax.sql.XADataSource --property "User=${dbUser}:Password=${dbPassword}:URL=jdbc\:postgresql\://${dbHost}/${dbName}" cwsPool"
readonly cmdDS="${cmd} create-jdbc-resource --connectionpoolid cwsPool datasources/cwsDS"
readonly cmdStart="${cmd} start-domain ${domain}"
readonly cmdStop="${cmd} stop-domain ${domain}"
readonly cmdDeploy="${cmd} deploy ${source}/cws-payara/target/cws.war"
readonly cmdUndeploy="${cmd} undeploy cws.war"

# Lock file settings for flock. Please don't change this!
readonly scriptLockFD="200"
readonly scriptLock="/tmp/.`basename $0`.lock"

# Script specific information, should only be altered, if logic is updated
readonly scriptVersion="1.00"
readonly scriptAuthor="Kim Jensen"
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Show Help - Displays the help, to use this script
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
show_help () {
    echo "Payara Control script, Version ${scriptVersion} by ${scriptAuthor}"
    echo "Usage: `basename $0` [Action]"
    echo
    echo "  The Action must be one of the following:"
    echo "    configure Attempts to configure a CWS Payara instance"
    echo "    start     Attempts to start a CWS Payara instance"
    echo "    stop      Attempts to stop the running CWS Payara instance"
    echo "    deploy    Deploy the latest CWS snapshot to Payara"
    echo "    undeploy  Undeploy the currently deployed CWS snapshot"
    echo "    status    Retrieves the status of the CWS Payara instance"
    echo "    log       Tail on the Server Log"
    echo "    clean     Cleanup of Payara, removing all deployments & log files"
    echo
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# getProcesses - Returns the number of processes associated with Payara
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> 1 if Payara is running, 0 if not
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
getProcesses () {
    currentProcesses=0

    echo "ToDo"

    return ${currentProcesses}
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doConfigure - Attempts to configure Payara
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doConfigure () {
    getProcesses

    if [ $? -eq 0 ]; then
        echo "Starting Payara ..."
        ${cmdStart} 2>&1 &
        echo "Payara has been started, now configuring it for CWS"
        ${cmdAddPG}
        ${cmdPool}
        ${cmdDS}
        echo "Payara has been configured"
    else
        echo "Payara cannot be configured when already running"
    fi
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doStart - Attempts to start Payara
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doStart () {
    getProcesses

    if [ $? -eq 0 ]; then
        echo "Starting Payara ..."
        ${cmdStart} 2>&1 &
        echo "Payara has been started"
    else
        echo "Payara is already running"
    fi
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doStop - Attempts to stop Payara
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doStop () {
    getProcesses

    if [ $? -eq 0 ]; then
        echo "Payara is not running"
    else
        echo "Stopping Payara ..."
        ${cmdStop}
        echo "Payara has been stopped"
    fi
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doDeploy - Attempts to deploy the latest snapshot to Payara
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doDeploy () {
    getProcesses

    if [ $? -eq 0 ]; then
        echo "Payara is not running"
    else
        echo "Deploying the latest Snapshot to Payara"
        ${cmdDeploy}
    fi
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doUndeploy - Undeploy's current deployed snapshot from Payara
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doUndeploy () {
    getProcesses

    if [ $? -eq 0 ]; then
        echo "Payara is not running"
    else
        echo "Undeploying current deployed snapshot from Payara"
        ${cmdUndeploy}
    fi
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doStatus - Retrieves the Payara Status
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doStatus () {
    getProcesses

    if [ $? -eq 0 ]; then
        echo "Payara is not running"
    else
        echo "Payara is currently running"
    fi
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doLog - Tail on the Payara Server log
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doLog () {
    tail -f ${GLASSFISH_HOME}/glassfish/domains/${domain}/logs/server.log
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doClean - Cleaning up logs and results
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doClean () {
    getProcesses

    if [ $? -ge 1 ]; then
        echo "Cannot clear files when Payara is running."
    else
        echo "ToDo"
    fi
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Main part, please don't touch!
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

# Create & Acquire lock file
eval "exec ${scriptLockFD}>${scriptLock}"
flock -n ${scriptLockFD}

if [ $? -ne 0 ]; then
    echo "Another instance is already running..."
    exit 1
elif [ $# = 1 ]; then
    action=${1}

    if [ "${action}" = "configure" ]; then
        doConfigure
    elif [ "${action}" = "start" ]; then
        doStart
    elif [ "${action}" = "stop" ]; then
        doStop
    elif [ "${action}" = "deploy" ]; then
        doDeploy
    elif [ "${action}" = "undeploy" ]; then
        doUndeploy
    elif [ "${action}" = "status" ]; then
        doStatus
    elif [ "${action}" = "log" ]; then
        doLog
    elif [ "${action}" = "clean" ]; then
        doClean
    else
        show_help
    fi
else
    show_help
fi

# Now, remove the lockFile
flock -u "${scriptLockFD}"
rm ${scriptLock}
