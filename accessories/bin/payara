#!/bin/bash
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Payara Control Script
# -----------------------------------------------------------------------------
# History:
#   Version 1.01 - 2018-07-08, Kim Jensen <kim@dawn.dk>
#     o Corrected script to use externally defined variables
#     o Added building of CWS from sources
#   Version 1.00 - 2018-06-20, Kim Jensen <kim@dawn.dk>
#     o Initial version
# -----------------------------------------------------------------------------
# Methods:
#     o show_help     ( Void )  ::  Shows help on using the script
#     o doLock        ( Void )  ::  Creates a lock file
#     o doBuild       ( Void )  ::  Build CWS from source
#     o doConfigure   ( Void )  ::  Attempts to configure Payara
#     o doStart       ( Void )  ::  Attempts to start Payara
#     o doStop        ( Void )  ::  Attempts to stop Payara
#     o doDeploy      ( Void )  ::  Attempts to deploy into Payara
#     o doUndeploy    ( Void )  ::  Attempts to undeploy from Payara
#     o doLog         ( Void )  ::  Tails the server log
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Configuration settings, please only modify this section
# -----------------------------------------------------------------------------
readonly domain="domain1"
readonly dbUser="cws_user"
readonly dbPassword="cws"
readonly dbHost="localhost"
readonly dbName="cws"

# Java & JBoss (Payara) settings
export JAVA_OPTS="${JAVA_OPTS} -Xms1303m -Xmx1303m -Djava.net.preferIPv4Stack=true"

# Lock file settings for flock. Please don't change this!
readonly scriptLockFD="200"
readonly scriptLock="/tmp/.`basename $0`.lock"

# Script specific information, should only be altered, if logic is updated
readonly scriptVersion="1.01"
readonly scriptAuthor="Kim Jensen"
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Show Help - Displays the help, to use this script
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
show_help () {
    echo "Payara Control script, Version ${scriptVersion} by ${scriptAuthor}"
    echo "Note; this script is simply wrapping the Payara/Glassfish admin script."
    echo "Usage: `basename $0` [Action]"
    echo
    echo "  The Action must be one of the following:"
    echo "    build     Builds the CWS from source (requires Maven)"
    echo "    configure Attempts to configure a CWS Payara instance"
    echo "    start     Attempts to start a CWS Payara instance"
    echo "    stop      Attempts to stop the running CWS Payara instance"
    echo "    deploy    Deploy the latest CWS snapshot to Payara"
    echo "    undeploy  Undeploy the currently deployed CWS snapshot"
    echo "    log       Tail on the Server Log"
    echo
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doConfigure - Attempts to configure Payara
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doBuild () {
    echo "Building CWS from source"
    cd ${CWS_SOURCES}
    mvn clean package
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doConfigure - Attempts to configure Payara
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doConfigure () {
    echo "Configuring running Payara instance for CWS"

    ${GLASSFISH_HOME}/glassfish/bin/asadmin add-library ${CWS_SOURCES}/accessories/release/postgresql-42.2.4.jar
    ${GLASSFISH_HOME}/glassfish/bin/asadmin create-jdbc-connection-pool --datasourceclassname org.postgresql.xa.PGXADataSource --restype javax.sql.XADataSource --property "User=${dbUser}:Password=${dbPassword}:URL=jdbc\:postgresql\://${dbHost}/${dbName}" cwsPool
    ${GLASSFISH_HOME}/glassfish/bin/asadmin create-jdbc-resource --connectionpoolid cwsPool datasources/cwsDS
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doStart - Attempts to start Payara
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doStart () {
    echo "Starting Payara ..."

    ${GLASSFISH_HOME}/glassfish/bin/asadmin start-domain ${domain}
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doStop - Attempts to stop Payara
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doStop () {
    echo "Stopping Payara ..."

    ${GLASSFISH_HOME}/glassfish/bin/asadmin stop-domain ${domain}
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doDeploy - Attempts to deploy the latest snapshot to Payara
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doDeploy () {
    echo "Deploying the latest Snapshot to Payara"

    ${GLASSFISH_HOME}/glassfish/bin/asadmin deploy --force ${CWS_SOURCES}/cws-payara/target/cws.war
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doUndeploy - Undeploy's current deployed snapshot from Payara
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doUndeploy () {
    echo "Undeploying current deployed snapshot from Payara"

    ${GLASSFISH_HOME}/glassfish/bin/asadmin undeploy cws
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doLog - Tail on the Payara Server log
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doLog () {
    tail -f ${GLASSFISH_HOME}/glassfish/domains/${domain}/logs/server.log
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Main part, please don't touch!
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

# Create & Acquire lock file
eval "exec ${scriptLockFD}>${scriptLock}"
flock -n ${scriptLockFD}

if [ $? -ne 0 ]; then
    echo "Another instance is already running..."
    exit 1
elif [ $# = 1 ]; then
    if [ -z "${GLASSFISH_HOME}"  ]; then
        echo "Script requires that the system variable \$GLASSFISH_HOME is defined."
        echo
    else
        action=${1}

        if [ "${action}" = "build" ]; then
            if [ -z "${M2_HOME}" ]; then
                echo "Maven is not defined, please install it and set the environment variable \$M2_HOME."
            else
                doBuild
            fi
        elif [ "${action}" = "configure" ]; then
            doConfigure
        elif [ "${action}" = "start" ]; then
            doStart
        elif [ "${action}" = "stop" ]; then
            doStop
        elif [ "${action}" = "deploy" ]; then
            if [ -z "${CWS_SOURCES}" ]; then
                echo "Deploying CWS requires that \$CWS_SOURCES is defined to the root of the CWS sources directory."
            else
                doDeploy
            fi
        elif [ "${action}" = "undeploy" ]; then
            doUndeploy
        elif [ "${action}" = "log" ]; then
            doLog
        else
            show_help
        fi
    fi
else
    show_help
fi

# Now, remove the lockFile
flock -u "${scriptLockFD}"
rm ${scriptLock}
